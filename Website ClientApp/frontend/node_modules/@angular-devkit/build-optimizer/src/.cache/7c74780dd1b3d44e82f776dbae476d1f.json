{"remainingRequest":"C:\\Users\\JorisD\\Documents\\School\\web4\\WEBSITEZZZ\\web4-20172018-2b12c1-gent-JorisOpsommer\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\JorisD\\Documents\\School\\web4\\WEBSITEZZZ\\web4-20172018-2b12c1-gent-JorisOpsommer\\frontend\\node_modules\\rxjs\\util\\isNumeric.js","dependencies":[{"path":"C:\\Users\\JorisD\\Documents\\School\\web4\\WEBSITEZZZ\\web4-20172018-2b12c1-gent-JorisOpsommer\\frontend\\node_modules\\rxjs\\util\\isNumeric.js","mtime":1531434731294},{"path":"C:\\Users\\JorisD\\Documents\\School\\web4\\WEBSITEZZZ\\web4-20172018-2b12c1-gent-JorisOpsommer\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531434709211},{"path":"C:\\Users\\JorisD\\Documents\\School\\web4\\WEBSITEZZZ\\web4-20172018-2b12c1-gent-JorisOpsommer\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1531434705755}],"contextDependencies":[],"result":["\"use strict\";\r\nvar isArray_1 = require('../util/isArray');\r\nfunction isNumeric(val) {\r\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\r\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n    // subtraction forces infinities to NaN\r\n    // adding 1 corrects loss of precision from parseFloat (#15100)\r\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\r\n}\r\nexports.isNumeric = isNumeric;\r\n;\r\n//# sourceMappingURL=isNumeric.js.map",null]}